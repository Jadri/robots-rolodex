{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardRobot","props","Card","className","Img","variant","alt","src","robot","id","Body","Title","name","Text","company","catchPhrase","email","CardList","Row","robotsprop","map","Col","xs","sm","md","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","robots","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","toLocaleLowerCase","Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVAIaA,G,MAAY,SAAAC,GAAK,OAC1B,kBAACC,EAAA,EAAD,CAAMC,UAAU,qBACZ,kBAACD,EAAA,EAAKE,IAAN,CAAUC,QAAQ,MAAMC,IAAI,QAAQC,IAAG,+BAA0BN,EAAMO,MAAMC,GAAtC,eACvC,kBAACP,EAAA,EAAKQ,KAAN,KACI,kBAACR,EAAA,EAAKS,MAAN,KAAaV,EAAMO,MAAMI,MACzB,kBAACV,EAAA,EAAKW,KAAN,KACKZ,EAAMO,MAAMM,QAAQC,YADzB,IACuCd,EAAMO,MAAMQ,W,gBCNlDC,EAAW,SAAAhB,GAAK,OACzB,kBAACiB,EAAA,EAAD,KACGjB,EAAMkB,WAAWC,KAAI,SAAAZ,GAAK,OACxB,kBAACa,EAAA,EAAD,CAAKlB,UAAU,OAAOmB,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,IAAKjB,EAAMC,IAClD,kBAAC,EAAD,CAAWD,MAAOA,U,QCLlBkB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIzB,UAAU,2CACV0B,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CHG,G,wBAzCX,aAAe,IAAD,8BACV,+CAaJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXC,OAAQ,GACRJ,YAAa,IAJL,E,iFAQO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEK,OAAQK,S,+BAOjC,IAAD,EACyBC,KAAKP,MAA7BC,EADD,EACCA,OAAQJ,EADT,EACSA,YAIVW,EAAiBP,EAAOQ,QAAO,SAAAtC,GAAK,OACxCA,EAAMI,KAAKmC,cAAcC,SAASd,EAAYe,wBAEhD,OACI,yBAAK9C,UAAU,OACb,kBAAC+C,EAAA,EAAD,CAAW/C,UAAU,eACrB,wBAAIA,UAAU,aAAd,kBACE,kBAAC,EAAD,CACEwB,YAAY,gBACZC,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAUT,WAAY0B,U,GAnClBM,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.9a04987d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card } from \"react-bootstrap\";\r\nimport './card.component.styles.css';\r\n\r\nexport const CardRobot = props => (\r\n    <Card className=\"h-100 mb-3 shadow\">\r\n        <Card.Img variant=\"top\" alt=\"robot\" src={`https://robohash.org/${props.robot.id}?set=set3`} />\r\n        <Card.Body>\r\n            <Card.Title>{props.robot.name}</Card.Title>\r\n            <Card.Text>\r\n                {props.robot.company.catchPhrase} {props.robot.email}\r\n            </Card.Text>\r\n        </Card.Body>\r\n    </Card>\r\n)","import React from 'react';\r\nimport { CardRobot } from '../card/card.component';\r\nimport {Row, Col} from \"react-bootstrap\";\r\n\r\nexport const CardList = props => (\r\n    <Row>\r\n    \t{ props.robotsprop.map(robot => (\r\n    \t    <Col className=\"mb-3\" xs=\"6\" sm=\"4\" md=\"3\" key={robot.id}> \r\n    \t        <CardRobot robot={robot} />\r\n    \t    </Col>))} \r\n    </Row>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (  // destructuring props objekt\r\n    <input\r\n        className=\"my-3 form-control form-control-lg search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\n// KAD SE NE BI KORISTIO DESTRUCTURING PROPS\r\n// export const SearchBox = (props) => (  \r\n//     <input\r\n//         className=\"m-3\"\r\n//         type=\"search\"\r\n//         placeholder={props.placeholder}\r\n//         onChange={props.handleChange}\r\n//     />\r\n// )","import React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { Container } from \"react-bootstrap\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n          robots: [],\n          searchField: ''\n        }\n    }\n   \n    componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users') // dohvaÄ‡a podatke\n        .then(response => response.json()) // konvertira u format razumljiv javascriptu (json)\n        .then(users => this.setState({ robots: users })) // uzima korisnika i postavlja ih u objekt state\n    }\n\n    handleChange = (e) => {\n      this.setState({ searchField: e.target.value });\n    }\n\n    render() {\n      const { robots, searchField } = this.state;\n      // UMJESTO DESTRUCTURING BI SE TO MOGLO NAPISATI I OVAKO:\n      // const robots = this.state.robots;\n      // const searchField = this.state.searchField;\n      const filteredRobots = robots.filter(robot => \n        robot.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n      return (\n          <div className=\"App\">\n            <Container className=\"text-center\">\n            <h1 className=\"display-1\" >Robots Rolodex</h1>\n              <SearchBox \n                placeholder='Search robots' \n                handleChange={this.handleChange} \n              />\n              <CardList robotsprop={filteredRobots}/>\n            </Container>\n          </div>\n      );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}